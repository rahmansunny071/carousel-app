{"version":3,"sources":["Components/logo.svg","Components/Slide.js","Components/Arrow.js","Components/Indicator/Dot.js","Components/Indicator/Indicator.js","Components/Carousel.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Slide","_ref","imageUrl","styles","backgroundImage","concat","backgroundSize","backgroundPosition","react_default","a","createElement","className","style","Arrow","direction","clickFunction","glyph","onClick","Dot","id","active","dotClick","names","Indicator","index","images","dotsGroup","map","image","i","Indicator_Dot","key","imgUrls","Carousel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onIndicatorDotClick","state","currentImageIndex","setState","nextSlide","bind","assertThisInitialized","previousSlide","lastIndex","length","Components_Arrow","Components_Slide","Components_Indicator_Indicator","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","Carousel_Carousel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45a1704e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\n//given the image, generate the Slide component that conatins the image with added styles \r\n\r\nconst Slide = ({ imageUrl }) => {\r\n\tconst styles = {\r\n\t\tbackgroundImage: `url(${imageUrl})`,\r\n\t\tbackgroundSize: 'cover',\r\n\t\tbackgroundPosition: 'center'\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<div className=\"slide\" style={styles}></div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Slide","import React from 'react'\r\n\r\n//takes the arrow direction as input, the function that implements the click logic, the arrow image\r\n//returns Arrow component\r\nconst Arrow = ({ direction, clickFunction, glyph }) => (\r\n\t<div \r\n\t\tclassName={ `slide-arrow ${direction}` } \r\n\t\tonClick={ clickFunction }>\r\n\t\t{ glyph } \r\n\t</div>\r\n);\r\n\r\n\r\nexport default Arrow","import React from 'react'\r\n\r\n//return the dot component\r\n\r\nconst Dot = ({ id, active, dotClick }) => {\r\n  const names = active ? 'dot active' : 'dot'\r\n  return <div className={names} onClick={() => dotClick(id)} />\r\n}\r\n\r\n\r\nexport default Dot","import React from 'react'\r\nimport Dot from './Dot';\r\n\r\n//return an indicator component (dots-container) with a list of dots (dotsGroup) \r\n\r\nconst Indicator = ({ index, images, dotClick }) => {\r\n  \r\n  const dotsGroup = images.map((image, i) => {\r\n    let active = (i === index) ? true : false\r\n    return (\r\n      <Dot\r\n        key={i}\r\n        id={i}\r\n        active={active}\r\n        dotClick={dotClick}\r\n      />\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"dots-container\">\r\n      { dotsGroup }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Indicator","import React from 'react';\nimport logo from './logo.svg';\nimport './Carousel.css';\nimport Slide from './Slide';\nimport Arrow from './Arrow';\nimport Indicator from './Indicator/Indicator';\n\n//assumption: web service serves a list of image URLs \n\nconst imgUrls = [\n\t'https://wpblink.com/sites/default/files/wallpaper/movie/72658/avengers-wallpapers-hd-72658-211614.png', \n\t'https://wallpapermemory.com/uploads/608/captain-america-marvel-comics-background-hd-2560x1440-292735.jpg',\n\t'http://cdn.collider.com/wp-content/uploads/iron_man_2_movie_image_hi-res_03-600x337.jpg',\n\t'https://images6.alphacoders.com/620/thumb-1920-620069.jpg',\n\t'https://wallpaperaccess.com/full/110384.jpg'\n];\n/*\nthe Carousel component. holds sub-components: Slide, Arrow, and Indicator. \nImplemetns Carousel interaction logics\n\tArrow click (left and right)\n\tIndicator Dot Click\n*/\n\nexport default class Carousel extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tcurrentImageIndex: 0  //index of the current image being displayed\n\t\t};\n\t\t\n\t\tthis.nextSlide = this.nextSlide.bind(this); //right arrow click action\n\t\tthis.previousSlide = this.previousSlide.bind(this); //left arrow click action\n\t\t\n\t}\n\t\n\t//left arrow click action\n\tpreviousSlide () {\n\t\tconst lastIndex = imgUrls.length - 1;\n\t\tconst { currentImageIndex } = this.state;\n\t\tconst setToLastIndex = currentImageIndex === 0; //true when current image is the first image\n\t\t\n\t\t//if current image is the first image, set new index to the last image\n\t\t//else decrease index by 1\n\t\tconst index =  setToLastIndex ? lastIndex : currentImageIndex - 1;\n\t\t\n\t\tthis.setState({\n\t\t\tcurrentImageIndex: index //set the state to appropriate image index\n\t\t});\n\t}\n\t\n\t//right arrow click action\n\tnextSlide () {\n\t\tconst lastIndex = imgUrls.length - 1;\n\t\tconst { currentImageIndex } = this.state;\n\t\tconst setToFirstIndex = currentImageIndex === lastIndex; //true when current image is the last image\n\t\t\n\t\t//if current image is the last image, set new index to the first image\n\t\t//else increase index by 1\n\t\tconst index =  setToFirstIndex ? 0 : currentImageIndex + 1;\n\n\t\tthis.setState({\n\t\t\tcurrentImageIndex: index //set the state to appropriate image index\n\t\t});\n\t}\n\n\t\n\tonIndicatorDotClick = i => {\n\n\t\t// Do nothing if someone clicks on the currently active dot\n\t\tconst { currentImageIndex } = this.state;\n\t\t\n\t\t// If the number taken from the i argument passed into onIndicatorDotClick is\n\t\t// equal to currently active dot, i, then do nothing\n\t\tif(i === currentImageIndex) \n\t\t  return\n\t    // We need to go jump to Slide i corresponding to Dot i\n\t\telse\n\t\t\tthis.setState({\n\t\t\t\tcurrentImageIndex: i\n\t\t\t});\n\t}\n\t\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"Carousel\">\n\t\t\t\t<Arrow \n\t\t\t\t\tdirection=\"left\" \n\t\t\t\t\tclickFunction={ this.previousSlide } \n\t\t\t\t\tglyph=\"&#9664;\" \n\t\t\t\t/>\n\t\t\t\t<Slide \n\t\t\t\t\timageUrl={ imgUrls[this.state.currentImageIndex] } \n\t\t\t\t/>\n\t\t\t\t<Indicator \n\t\t\t\t\tindex={this.state.currentImageIndex} \n\t\t\t\t\timages={imgUrls} \n\t\t\t\t\tdotClick={this.onIndicatorDotClick}\n\t\t\t\t/>\n\t\t\t\t<Arrow \n\t\t\t\t\tdirection=\"right\" \n\t\t\t\t\tclickFunction={ this.nextSlide } \n\t\t\t\t\tglyph=\"&#9654;\" \n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Carousel from './Components/Carousel';\nimport * as serviceWorker from './serviceWorker';\n\n//this is the JavaScript entrypoint for the CRA:Create React App. Create React App preconfigures \n//the required tools like Webpack and Babel.\n\n/*\n\"src\" folder structure\nsrc/\n\tindex.js\n\tComponets/\n\t\tCarousel.js --- the main component, Carousel\n\t\tCarousel.css --- styleSheet\n\t\tSlide.js --- Each slide of a carousel\n\t\tArrow.js --- arrow factory, renders left and right arrow\n\t\tIndicator/\n\t\t\tIndicator.js --- slide index indicator with a collection of dots\n\t\t\tDot.js --- each dot of an indicator\t\t\n*/\n\n//add Carousel component to the root container and render the DOM element\n\nReactDOM.render(<Carousel />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}